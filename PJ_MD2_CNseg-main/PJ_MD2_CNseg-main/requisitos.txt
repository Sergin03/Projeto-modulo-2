terminar a criação do bd

responder ests perguntas 
1. Selecionar a quantidade total de estudantes cadastrados no banco; feito

2. Selecionar quais pessoas facilitadoras atuam em mais de uma turma;


3. Crie uma view que selecione a porcentagem de estudantes com status de evasão
agrupados por turma;



4. Crie um trigger para ser disparado quando o atributo status de um estudante for atualizado
e inserir um novo dado em uma tabela de log.





5. Além disso, vocês deverão pensar em uma pergunta que deverá ser respondida por uma
consulta SQL que combine pelo menos 3 tabelas.

criar a pergunta que utilize 3 entidades no minimo

fluxograma



criar 6 tipos de consultas 


criar os slides


CREATE TABLE matricula 
( 
 matricula_id INT PRIMARY KEY,  
 tipo INT,  
 aluno_id INT,  
 facilitador_id INT,  
 turma_id INT,  
 idfacilitadores INT,  
 idturma INT,  
 idalunos INT,  
); 

CREATE TABLE facilitadores 
( 
 facilitador_id INT PRIMARY KEY,  
 nome INT,  
 cpf INT,  
 email INT,  
); 

CREATE TABLE turma 
( 
 turma_id INT PRIMARY KEY,  
 nome INT,  
 data_inicio INT,  
 data_fim INT,  
 cursos_id INT,  
 idfacilitadores INT,  
 idcursos INT,  
); 

CREATE TABLE alunos 
( 
 alunos_id INT PRIMARY KEY,  
 nome INT,  
 cpf INT,  
 status INT,  
 idlog INT,  
); 

CREATE TABLE log 
( 
 log_id INT PRIMARY KEY,  
 aluno_id INT,  
 dado_novo INT,  
 dado_anterior INT,  
); 

CREATE TABLE cursos 
( 
 cursos_id INT PRIMARY KEY,  
 nome INT,  
 modulos_id INT,  
 idmodulos INT,  
); 

CREATE TABLE modulos 
( 
 modulos_id INT PRIMARY KEY,  
 nome INT,  
 carga_horaria INT,  
); 

ALTER TABLE matricula ADD FOREIGN KEY(idfacilitadores) REFERENCES facilitadores (idfacilitadores)
ALTER TABLE matricula ADD FOREIGN KEY(idturma) REFERENCES turma (idturma)
ALTER TABLE matricula ADD FOREIGN KEY(idalunos) REFERENCES alunos (idalunos)
ALTER TABLE turma ADD FOREIGN KEY(idfacilitadores) REFERENCES facilitadores (idfacilitadores)
ALTER TABLE turma ADD FOREIGN KEY(idcursos) REFERENCES cursos (idcursos)
ALTER TABLE alunos ADD FOREIGN KEY(idlog) REFERENCES log (idlog)
ALTER TABLE cursos ADD FOREIGN KEY(idmodulos) REFERENCES modulos (idmodulos)

-- Guilherme
CREATE TABLE matricula  
(  
 matricula_id INT PRIMARY KEY,   
 tipo INT NOT NULL,   
 aluno_id INT NOT NULL,   
 facilitador_id INT NOT NULL,   
 turma_id INT NOT NULL,   
 FOREIGN KEY (aluno_id) REFERENCES alunos (aluno_id),
 FOREIGN KEY (facilitador_id) REFERENCES facilitadores (facilitador_id),
 FOREIGN KEY (turma_id) REFERENCES turma (turma_id)
);  

CREATE TABLE facilitadores  
(  
 facilitador_id INT PRIMARY KEY,   
 nome VARCHAR(100) NOT NULL,   
 cpf VARCHAR(20) NOT NULL,   
 email VARCHAR(100) NOT NULL
);  

CREATE TABLE turma  
(  
 turma_id INT PRIMARY KEY,   
 nome VARCHAR(100) NOT NULL,   
 data_inicio DATE NOT NULL,   
 data_fim DATE NOT NULL,   
 cursos_id INT NOT NULL,
 facilitador_id INT NOT NULL,
 FOREIGN KEY (cursos_id) REFERENCES cursos (cursos_id),
 FOREIGN KEY (facilitador_id) REFERENCES facilitadores (facilitador_id)
);  

CREATE TABLE alunos  
(  
 aluno_id INT PRIMARY KEY,   
 nome VARCHAR(100) NOT NULL,   
 cpf VARCHAR(20) NOT NULL,   
 status INT NOT NULL,
 idlog INT,
 FOREIGN KEY (idlog) REFERENCES log (log_id)
);  

CREATE TABLE log  
(  
 log_id INT PRIMARY KEY,   
 aluno_id INT NOT NULL,   
 dado_novo INT NOT NULL,   
 dado_anterior INT NOT NULL
);  

CREATE TABLE cursos  
(  
 cursos_id INT PRIMARY KEY,   
 nome VARCHAR(100) NOT NULL,   
 modulos_id INT NOT NULL,
 FOREIGN KEY (modulos_id) REFERENCES modulos (modulos_id)
);  

CREATE TABLE modulos  
(  
 modulos_id INT PRIMARY KEY,   
 nome VARCHAR(100) NOT NULL,   
 carga_horaria INT NOT NULL
);  
